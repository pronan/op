worker_processes  1;
error_log  logs/error.log;
pid logs/nginx.pid;

events {worker_connections  1024;}

http {
    lua_code_cache off;
    default_type  "text/html; charset=utf-8";
    
    sendfile        on;
    keepalive_timeout  65;
    lua_package_path './?.lua;./?/init.lua;;';    
    init_by_lua_file init.lua;
    init_worker_by_lua_file init_worker.lua;
    
    #access_log  off;
    #autoindex on;
    
    client_body_temp_path temp/client_body_temp;
    fastcgi_temp_path temp/fastcgi_temp;
    proxy_temp_path temp/proxy_temp;
    scgi_temp_path temp/scgi_temp;
    uwsgi_temp_path temp/uwsgi_temp;

    encrypted_session_key "abcdefghijklmnopqrstuvwxyz123456";
    encrypted_session_iv "1234567812345678";
    encrypted_session_expires 30d;

    server {
        listen       8080;
        server_name  localhost;
        root html;
        include mime.types;

        location / {
            resolver 223.5.5.5;
            content_by_lua_block {
                local ok, err = xpcall(require"resty.mvc.dispatcher", require"resty.utils.base".debugger)
                if not ok then
                    ngx.header['Content-Type'] = "text/plain; charset=utf-8"
                    ngx.say(err)
                end
            }
        }

        location = /exec {
            content_by_lua_block{
                ngx.header['Set-Cookie'] = "session='ax'; Max-Age=10; Path=/"
                ngx.print('yes')
            }
        }

        location = /test {
            content_by_lua_file test.lua;
        }

        location = /favicon.ico {
            root static/images;
        }

        location /static { 
            alias static;
        }
        location /loaderio-933b610b316e7b9c7bf409839db1d611.txt { 
            alias loaderio-933b610b316e7b9c7bf409839db1d611.txt;
        }
        location = /gitpush {
            content_by_lua_block{
                ngx.req.read_body()
                local decode = require"cjson.safe".decode
                local data = ngx.req.get_post_args()
                local payload = decode(data.payload)
                if payload.commits[1].message=='production' then
                    os.execute('git --git-dir=/root/wdksw/.git --work-tree=/root/wdksw pull')
                end
            }
        }
    }


 
}
