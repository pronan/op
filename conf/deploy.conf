worker_processes  1;
error_log  logs/error.log;
pid logs/nginx.pid;

events {worker_connections  1024;}

http {
    default_type  "text/html; charset=utf-8";
    sendfile        on;
    keepalive_timeout  65;
    lua_package_path './?.lua;./?/init.lua;;';    
    init_by_lua_file init.lua;
    init_worker_by_lua_file init_worker.lua;
    
    lua_code_cache on;
    access_log  off;
    
    client_body_temp_path temp/client_body_temp;
    fastcgi_temp_path temp/fastcgi_temp;
    proxy_temp_path temp/proxy_temp;
    scgi_temp_path temp/scgi_temp;
    uwsgi_temp_path temp/uwsgi_temp;

    encrypted_session_key "abcdefghijklmnopqrstuvwxyz123456";
    encrypted_session_iv "1234567812345678";
    encrypted_session_expires 30d;

    server {
        listen       80;
        root html;
        include mime.types;

        location / {
            resolver 223.5.5.5;
            content_by_lua_block {
                local handler = require"main.init".handler
                handler()
            }
        }
        location ~ /(accounts|jiangan|pay) {
            uwsgi_pass  unix:///var/run/proj.sock;
            include     /root/djtest/uwsgi_params;
        }
        location = /favicon.ico {
            root static/images;
        }
        location /static { 
            alias static;
        }
        location /4827a04af0e8c7a6d07614c4b487ec52.txt { 
            alias 4827a04af0e8c7a6d07614c4b487ec52.txt;
        }
        location = /gitpush {
            content_by_lua_block{
                ngx.req.read_body()
                local decode = require"cjson.safe".decode
                local data = ngx.req.get_post_args()
                local payload = decode(data.payload)
                if payload.commits[1].message=='production' then
                    local res = os.execute('git --git-dir=/root/op/.git --work-tree=/root/op pull')
                    return ngx.print('git pull is executed, result:', res)
                else
                    return ngx.print('no actions performed')
                end
            }
        }
    }


 
}
